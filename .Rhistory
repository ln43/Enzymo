dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/3)
init = c(5,10)
s1 = lsoda(init,times=t,func=f,parms)
plot(s1[,2],s1[,3],type="l")
f = function(t,x,parms){
dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/6,1/3,1/2)
init1 = c(5,10)
init2 = c(10,5)
s1 = lsoda(init1,times=t,func=f,parms[1])
s2 = lsoda(init1,times=t,func=f,parms[2])
s3 = lsoda(init1,times=t,func=f,parms[3])
s4 = lsoda(init2,times=t,func=f,parms[2])
s5 = lsoda(init2,times=t,func=f,parms[3])
plot(s1[,2],s1[,3],type="l")
lines(s2[,2],s2[,3],type="l")
lines(s3[,2],s3[,3],type="l")
lines(s4[,2],s4[,3],type="l")
lines(s5[,2],s5[,3],type="l")
f = function(t,x,parms){
dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/6,1/3,1/2)
init1 = c(5,10)
init2 = c(10,5)
s1 = lsoda(init1,times=t,func=f,parms[1])
s2 = lsoda(init1,times=t,func=f,parms[2])
s3 = lsoda(init1,times=t,func=f,parms[3])
s4 = lsoda(init2,times=t,func=f,parms[2])
s5 = lsoda(init2,times=t,func=f,parms[3])
plot(s1[,2],s1[,3],type="l")
lines(s2[,2],s2[,3],type="l")
lines(s3[,2],s3[,3],type="l")
plot(s4[,2],s4[,3],type="l")
lines(s5[,2],s5[,3],type="l")
par(mfrow=c(1,2))
f = function(t,x,parms){
dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/6,1/3,1/2)
init1 = c(5,10)
init2 = c(10,5)
s1 = lsoda(init1,times=t,func=f,parms[1])
s2 = lsoda(init1,times=t,func=f,parms[2])
s3 = lsoda(init1,times=t,func=f,parms[3])
s4 = lsoda(init2,times=t,func=f,parms[2])
s5 = lsoda(init2,times=t,func=f,parms[3])
plot(s1[,2],s1[,3],type="l")
lines(s2[,2],s2[,3],type="l")
lines(s3[,2],s3[,3],type="l")
plot(s4[,2],s4[,3],type="l")
lines(s5[,2],s5[,3],type="l")
par(mfrow=c(1,2))
f = function(t,x,parms){
dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/6,1/3,1/2)
init1 = c(5,10)
init2 = c(10,5)
s1 = lsoda(init1,times=t,func=f,parms[1])
s2 = lsoda(init1,times=t,func=f,parms[2])
s3 = lsoda(init1,times=t,func=f,parms[3])
s4 = lsoda(init2,times=t,func=f,parms[2])
s5 = lsoda(init2,times=t,func=f,parms[3])
plot(s1[,2],s1[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s2[,2],s2[,3],type="l",col="blue")
lines(s3[,2],s3[,3],type="l",col="darkgreen")
par(mfrow=c(1,2))
f = function(t,x,parms){
dN = x[1]*(2-x[1]) - x[1]*x[2]/(1 + x[1])
dP = x[1]*x[2]/(1 + x[1]) - parms[1]*x[2]
list(c(dN,dP))
}
t = seq(0,100,by=0.1)
parms = c(1/6,1/3,1/2)
init1 = c(5,10)
init2 = c(10,5)
s1 = lsoda(init1,times=t,func=f,parms[1])
s2 = lsoda(init1,times=t,func=f,parms[2])
s3 = lsoda(init1,times=t,func=f,parms[3])
s4 = lsoda(init2,times=t,func=f,parms[2])
s5 = lsoda(init2,times=t,func=f,parms[3])
plot(s1[,2],s1[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s2[,2],s2[,3],type="l",col="blue")
lines(s3[,2],s3[,3],type="l",col="green")
plot(s4[,2],s4[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s5[,2],s5[,3],type="l",col="blue")
plot(s1[,2],s1[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s2[,2],s2[,3],type="l",lty=2)
lines(s3[,2],s3[,3],type="l",lty=3)
plot(s4[,2],s4[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s5[,2],s5[,3],type="l",col="blue")
plot(s4[,2],s4[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s5[,2],s5[,3],type="l",lty=2)
plot(s1[,2],s1[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s2[,2],s2[,3],type="l",lty=2)
lines(s3[,2],s3[,3],type="l",lty=3)
plot(s1[,2],s1[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s2[,2],s2[,3],type="l",lty=2)
lines(s3[,2],s3[,3],type="l",lty=3)
plot(s4[,2],s4[,3],type="l",main="Portrait de phase",xlab="N",ylab="P")
lines(s5[,2],s5[,3],type="l",lty=2)
10000*2*684
2*684
10000(2*684+1)
10000*(2*684+1)
qnorm(0.025)
qnorm(0.975)
4/0.1
40^2
4600/1600
2.92*1600
2.92*1600
2.917*1600
10000*2*4667
library(deSolve)
install.packages("rootSolve")
library(rootSolve)
pts_eq = function(mu){
p1 = c(0,0)
p2 = c(2,0)
p3 = c(mu/(1-mu),(2-3*mu)/(1-mu)^2)
return (rbind(p1,p2,p3))
}
eq = function(mu){
pts = pts_eq(mu)
val = vector(length = nrow(pts))
for (i in 1:nrow(pts)){
jacques = jacobian.full(y=pts[i],func=f,parms=c(mu))
tr = jacques[1,1] + jacques[2,2]
det = Det(jacques)
if (det<0) stab = -1
else{if (Tr<0){stab <- -1}
else{stab <- 1}}
val[i] = stab
}
return(cbind(pts,val))
}
mu=1/3
eq(mu)
pts_eq = function(mu){
p1 = c(0,0)
p2 = c(2,0)
p3 = c(mu/(1-mu),(2-3*mu)/(1-mu)^2)
return (rbind(p1,p2,p3))
}
eq = function(mu){
pts = pts_eq(mu)
val = vector(length = nrow(pts))
for (i in 1:nrow(pts)){
jacques = jacobian.full(y=pts[i,],func=f,parms=c(mu))
tr = jacques[1,1] + jacques[2,2]
det = Det(jacques)
if (det<0) stab = -1
else{if (Tr<0){stab <- -1}
else{stab <- 1}}
val[i] = stab
}
return(cbind(pts,val))
}
mu=1/3
eq(mu)
pts_eq = function(mu){
p1 = c(0,0)
p2 = c(2,0)
p3 = c(mu/(1-mu),(2-3*mu)/(1-mu)^2)
return (rbind(p1,p2,p3))
}
eq = function(mu){
pts = pts_eq(mu)
val = vector(length = nrow(pts))
for (i in 1:nrow(pts)){
jacques = jacobian.full(y=pts[i,],func=f,parms=c(mu))
tr = jacques[1,1] + jacques[2,2]
det = det(jacques)
if (det<0) stab = -1
else{if (Tr<0){stab <- -1}
else{stab <- 1}}
val[i] = stab
}
return(cbind(pts,val))
}
mu=1/3
eq(mu)
pts_eq = function(mu){
p1 = c(0,0)
p2 = c(2,0)
p3 = c(mu/(1-mu),(2-3*mu)/(1-mu)^2)
return (rbind(p1,p2,p3))
}
eq = function(mu){
pts = pts_eq(mu)
val = vector(length = nrow(pts))
for (i in 1:nrow(pts)){
jacques = jacobian.full(y=pts[i,],func=f,parms=c(mu))
tr = jacques[1,1] + jacques[2,2]
det = det(jacques)
if (det<0) stab = -1
else{if (tr<0){stab <- -1}
else{stab <- 1}}
val[i] = stab
}
return(cbind(pts,val))
}
mu=1/3
eq(mu)
32*32
install.packages("phaseR")
library(deSolve)
library(rootSolve)
library(phaseR)
library(deSolve)
f = function(t,y,parameters){
dR = parameters[1]*y[1] + parameters[2]*y[2]
dJ = parameters[3]*y[2] + parameters[4]*y[1]
list(c(dR,dJ))
}
t = seq(0,100,by=0.1)
parameters = c(0.7,0.9,-0.3,0.5)
init1 = c(0,0)
init2 = c(1,0.5)
s1 = lsoda(init1,times=t,func=f,parameters)
s2 = lsoda(init2,times=t,func=f,parameters)
plot(s1[,2],s1[,3],type="l")
lines(s2[,2],s2[,3],type="l",col="blue")
library(deSolve)
f = function(t,y,parameters){
dR = parameters[1]*y[1] + parameters[2]*y[2]
dJ = parameters[3]*y[2] + parameters[4]*y[1]
list(c(dR,dJ))
}
t = seq(0,100,by=0.1)
parameters = c(0.7,0.9,-0.3,0.5)
init1 = c(0,0)
init2 = c(1,0.5)
s1 = lsoda(init1,times=t,func=f,parameters)
s2 = lsoda(init2,times=t,func=f,parameters)
plot(s1[,2],s1[,3],type="l",ylim=c(0,4))
lines(s2[,2],s2[,3],type="l",col="blue")
library(deSolve)
f = function(t,y,parameters){
dR = parameters[1]*y[1] + parameters[2]*y[2]
dJ = parameters[3]*y[2] + parameters[4]*y[1]
list(c(dR,dJ))
}
t = seq(0,100,by=0.1)
parameters = c(0.7,0.9,-0.3,0.5)
init1 = c(0,0)
init2 = c(1,0.5)
s1 = lsoda(init1,times=t,func=f,parameters)
s2 = lsoda(init2,times=t,func=f,parameters)
plot(s1[,2],s1[,3],type="l",xlim=c(0,4))
lines(s2[,2],s2[,3],type="l",col="blue")
library(deSolve)
f = function(t,y,parameters){
dR = parameters[1]*y[1] + parameters[2]*y[2]
dJ = parameters[3]*y[2] + parameters[4]*y[1]
list(c(dR,dJ))
}
t = seq(0,100,by=0.1)
parameters = c(0.7,0.9,-0.3,0.5)
init1 = c(0,0)
init2 = c(1,0.5)
s1 = lsoda(init1,times=t,func=f,parameters)
s2 = lsoda(init2,times=t,func=f,parameters)
plot(s1[,2],s1[,3],type="l",xlim=c(0,4),ylim=c(0,4))
lines(s2[,2],s2[,3],type="l",col="blue")
library(deSolve)
f = function(t,y,parameters){
dR = parameters[1]*y[1] + parameters[2]*y[2]
dJ = parameters[3]*y[2] + parameters[4]*y[1]
list(c(dR,dJ))
}
t = seq(0,100,by=0.1)
parameters = c(0.7,0.9,-0.3,0.5)
init1 = c(0,0)
init2 = c(1,0.5)
s1 = lsoda(init1,times=t,func=f,parameters)
s2 = lsoda(init2,times=t,func=f,parameters)
plot(s1[,2],s1[,3],type="l",xlim=c(0,10),ylim=c(0,10))
lines(s2[,2],s2[,3],type="l",col="blue")
plot(t,s2[,2],type="l")
lines(,t,s2[,3],type="l")
plot(t,s2[,2],type="l")
lines(t,s2[,3],type="l")
5*500*50
125000/60
2083/60
5*25
125/60
qunif(0.02,0,1)
9.9-0.01*9.9
0.1+0.01*(9.9-0.1)
0.1*0.1
9.801*(1-0.01)
9.801+0.01*(9.801-0.198)
125000/60
2083/60
data = read_table("phasediag.txt")
data
data = read_csv("phasediag.txt")
data
data = read.table("phasediag.txt")
data
8*0.9
1+8*0.09+0.1
1.82_0.9
1.82-0.9
1+8*0.1*0.904382+0.1
1.823506-9*0.1
0.9+8*0.1+0.01
1.71-9*0.1*0.9
0.9+0.1*(6+3*0.9)
1.77-9*0.1*0.9
1+0.1*(6+3*0.9)
1.87-9*0.1
rm(list=ls())
den1 = 6
den1=1/6
den2=1/5
p = den1*(2+den2*2*(2+0.5)+den2*2*(2+1))
p
setwd("~/Desktop/3BIM/Enzymo")
file = read.table("temp.txt")
file
data = read.table("temp.txt",header=T)
data
data = read.table("temp.txt",header=T)
plot(data$T,data$Act,main="Activité de l'enzyme en fonction
de la température",xlab="Température (°C)",ylab="Activité")
data = read.table("temp.txt",header=T)
sunflowerplot(data$T,data$Act,main="Activité de l'enzyme en fonction
de la température",xlab="Température (°C)",ylab="Activité")
rm(list=ls())
rm(list=ls())
#library(nlstools)
#D?termination des param?tres cin?tiques avec 3 substrats de l'ACE :
# Mod?le de Michaelis-Menten
#ATC
d1=read.table("ATC.txt",h=T)
d1$"S"=d1$S*10^(-4)
d1=d1[1:21,] #Probable erreur sur les deux derni?res concentrations, ? v?rifier.
plot(d1)
mod1<-michaelis
vi1<-list(Vmax=1.5,Km=1e-04)
aj1<-nls(mod1,d1,vi1)
plotfit(aj1,smooth=T)
overview(aj1)
#Regions de confiance
beale=nlsConfRegions(aj1)
plot(beale)
#residus
resbar=nlsResiduals(aj1)
plot(resbar)
shapiro.test(residuals(aj1))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour1=nlsContourRSS(aj1,lseq=50)
plot(contour1,nlev=10)
##############################
#PTC
d2=read.table("PTC.txt",h=T)
d2$"S"=d2$S*10^(-4)
plot(d2)
mod2<-michaelis
vi2<-list(Vmax=1.5,Km=1e-04)
aj2<-nls(mod2,d2,vi2)
plotfit(aj2,smooth=T)
overview(aj2)
#Regions de confiance
beale=nlsConfRegions(aj2)
plot(beale)
#residus
resbar=nlsResiduals(aj2)
plot(resbar)
shapiro.test(residuals(aj2))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour2=nlsContourRSS(aj2,lseq=50)
plot(contour2,nlev=10)
##############################
#BTC --> ???
d3=read.table("BTC.txt",h=T)
d3$"S"=d3$S*10^(-4)
plot(d3)
mod3<-michaelis
vi3<-list(Vmax=1.5,Km=1e-04)
aj3<-nls(mod3,d3,vi3)
plotfit(aj3,smooth=T)
overview(aj3)
#Regions de confiance
beale=nlsConfRegions(aj3)
plot(beale)
#residus
resbar=nlsResiduals(aj3)
plot(resbar)
shapiro.test(residuals(aj3))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour3=nlsContourRSS(aj3,lseq=50)
plot(contour3,nlev=10)
library(nlstools)
install.packages("nlstools")
library(nlstools)
rm(list=ls())
#library(nlstools)
#D?termination des param?tres cin?tiques avec 3 substrats de l'ACE :
# Mod?le de Michaelis-Menten
#ATC
d1=read.table("ATC.txt",h=T)
d1$"S"=d1$S*10^(-4)
d1=d1[1:21,] #Probable erreur sur les deux derni?res concentrations, ? v?rifier.
plot(d1)
mod1<-michaelis
vi1<-list(Vmax=1.5,Km=1e-04)
aj1<-nls(mod1,d1,vi1)
plotfit(aj1,smooth=T)
overview(aj1)
#Regions de confiance
beale=nlsConfRegions(aj1)
plot(beale)
#residus
resbar=nlsResiduals(aj1)
plot(resbar)
shapiro.test(residuals(aj1))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour1=nlsContourRSS(aj1,lseq=50)
plot(contour1,nlev=10)
##############################
#PTC
d2=read.table("PTC.txt",h=T)
d2$"S"=d2$S*10^(-4)
plot(d2)
mod2<-michaelis
vi2<-list(Vmax=1.5,Km=1e-04)
aj2<-nls(mod2,d2,vi2)
plotfit(aj2,smooth=T)
overview(aj2)
#Regions de confiance
beale=nlsConfRegions(aj2)
plot(beale)
#residus
resbar=nlsResiduals(aj2)
plot(resbar)
shapiro.test(residuals(aj2))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour2=nlsContourRSS(aj2,lseq=50)
plot(contour2,nlev=10)
##############################
#BTC --> ???
d3=read.table("BTC.txt",h=T)
d3$"S"=d3$S*10^(-4)
plot(d3)
mod3<-michaelis
vi3<-list(Vmax=1.5,Km=1e-04)
aj3<-nls(mod3,d3,vi3)
plotfit(aj3,smooth=T)
overview(aj3)
#Regions de confiance
beale=nlsConfRegions(aj3)
plot(beale)
#residus
resbar=nlsResiduals(aj3)
plot(resbar)
shapiro.test(residuals(aj3))
#Contour de la Somme des Carr?s des ?carts r?siduels (rouge : r?gion de confiance selon Beale)
contour3=nlsContourRSS(aj3,lseq=50)
plot(contour3,nlev=10)
mod1<-michaelis
vi1<-list(Vmax=1.5,Km=1e-04)
aj1<-nls(mod1,d1,vi1)
plotfit(aj1,smooth=T)
overview(aj1)
beale=nlsConfRegions(aj1)
plot(beale)
resbar=nlsResiduals(aj1)
plot(resbar)
shapiro.test(residuals(aj1))
contour1=nlsContourRSS(aj1,lseq=50)
plot(contour1,nlev=10)
mod2<-michaelis
vi2<-list(Vmax=1.5,Km=1e-04)
aj2<-nls(mod2,d2,vi2)
plotfit(aj2,smooth=T)
overview(aj2)
mod3<-michaelis
vi3<-list(Vmax=1.5,Km=1e-04)
aj3<-nls(mod3,d3,vi3)
plotfit(aj3,smooth=T)
overview(aj3)
beale=nlsConfRegions(aj3)
plot(beale)
resbar=nlsResiduals(aj3)
plot(resbar)
shapiro.test(residuals(aj3))
contour3=nlsContourRSS(aj3,lseq=50)
plot(contour3,nlev=10)
